import numpy as np
import pandas as pd
import seaborn as sns
import plotly.express as px
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder

'''

RESUMO 
alvo    ==> 	vari√°vel que se pretende atingir (tem ou n√£o doen√ßa card√≠aca)

previsores      ==> 	conjunto de vari√°veis previsoras com as vari√°veis categ√≥ricas
                    transformadas em num√©ricas manualmente, sem escalonar

previsores_escalonados    ==> 	conjunto de vari√°veis previsoras com as vari√°veis categ√≥ricas
                    transformadas em num√©ricas e escalonadas

previsores2    ==> 	conjunto de vari√°veis previsoras com as vari√°veis categ√≥ricas
                    transformadas em num√©ricas pelo LabelEncoder

previsores3    ==> 	conjunto de vari√°veis previsoras com as vari√°veis categ√≥ricas
                    transformadas em num√©ricas pelo LabelEncoder e OneHotEncoder, sem escalonar

previsores3_escalonados    ==> 	conjunto de vari√°veis previsoras com as vari√°veis categ√≥ricas
                    transformadas em num√©ricas pelo LabelEncoder e OneHotEncoder, escalonadas

'''

dados = pd.read_csv('C:\\Users\\FelipeCF\\Desktop\\Codigos\\Machine-Learning\\archive\\heart_tratado.csv',
                    sep=';', encoding='iso-8859-1')

dados_tratados = pd.DataFrame.copy(dados)

# ===   Transformando as vari√°veis categ√≥ricas nominais em categ√≥ricas ordinais ===

dados_tratados['Sex'].replace(
    {
        "M":0,
        "F": 1
    }, inplace=True
)

dados_tratados['ChestPainType'].replace(
    {'TA': 0, 
     'ATA': 1, 
     'NAP': 2, 
     'ASY': 3},inplace=True)

dados_tratados['RestingECG'].replace(
    {'Normal': 0, 
        'ST': 1, 
        'LVH': 2},inplace=True)

dados_tratados['ExerciseAngina'].replace(
    {'N': 0, 
     'Y': 1},inplace=True)

dados_tratados['ST_Slope'].replace(
    {'Up': 0, 
     'Flat': 1, 
     'Down': 2},inplace=True)

# ===   LEGENDA ===

'''
    Age = int

    Sex = (M=0, F=1)

    Chest Pain Type (tipo de dor no peito) = [TA=0(tangina t√≠pica), ATA=1(angina at√≠pica), NAP=2 (dor n√£o anginosa), ASY=3 (assintom√°tico)]

    RestinBP (press√£o sangu√≠nea em repouso em mmHg) = float

    Cholesterol (s√©rico, mg/dl) = float

    Fasting BS (a√ßucar no sangue em jejum mg/dl) = [0 : < 120, 1 >= 120]

    Resting ECG (eletrocardiograma em repouso) = [normal=0, ST(anormalidade da onda)=1, ST-T (hipertrofia ventricular esquerda)]

    Max HR (frequencia cardiaca maxima) = float

    Exercise Angina = [N√£o=0, Sim=1]

    Old Peak (depress√£o de ST induzida por exercicio em rela√ß√£o ao repouso)

    ST_Slope (inclina√ß√£o do segmenet ST) = [Up=0, Flat=1, Down=2]

    Heart Disease = [N√£o=0, Sim=1]
'''

# ===   Atributos previsores e alvo ===

previsores = dados_tratados.iloc[:, 0:11].values # linhas, colunas

alvo = dados_tratados.iloc[:, 11].values # pegar coluna alvo da an√°lise


#   === An√°lise das escalas dos atributos (escalonamento)   ===

'''
Padroniza√ß√£o (utiliza a m√©dia e o desvio padr√£o como refer√™ncia) <==

Normaliza√ß√£o(utiliza os valores max e min como refer√™ncia)

==> m√©dia proxima de 0 e desvio padr√£o proximo de 1
'''

previsores_escalonados = StandardScaler().fit_transform(previsores)

previsoresdf = pd.DataFrame(previsores_escalonados)


#   === LabelEncoder: Codifica√ß√£o de vari√°veis categ√≥ricas   ===
previsores2 = dados.iloc[:, 0:11].values

# Aplica Label Encoding ‚Äî ou seja, converte valores categ√≥ricos em n√∫meros inteiros.
previsores2[:, 1] = LabelEncoder().fit_transform(previsores[:, 1])
previsores2[:, 2] = LabelEncoder().fit_transform(previsores[:, 2])
previsores2[:, 6] = LabelEncoder().fit_transform(previsores[:, 6])
previsores2[:, 8] = LabelEncoder().fit_transform(previsores[:, 8])
previsores2[:, 10] = LabelEncoder().fit_transform(previsores[:, 10])

# print(previsores2.shape)

#   === OneHotEncoder: Cria√ß√£o de vari√°veis Dummy   ===
'''
transformers    ==> 	Lista de tuplas no formato ('nome', transformador, colunas_do_labelEncoder)

remainder	==>     Define o que fazer com as colunas n√£o transformadas:
üîπ 'drop' (padr√£o) ‚Üí descarta
üîπ 'passthrough' ‚Üí mant√©m

sparse_threshold    ==>	Se algum transformador retorna matriz esparsa, define se o resultado final tamb√©m ser√° esparso (padr√£o: 0.3)

n_jobs	==> N√∫mero de threads para paralelizar (ex: -1 usa todos os n√∫cleos)

verbose	==> Se True, mostra mais informa√ß√µes durante a transforma√ß√£o

verbose_feature_names_out   ==>	Se True, mostra os nomes completos das features geradas

'''

# Aplica OneHot Encoding nas colunas que j√° foram LabelEncoded. Ou seja, transforma essas colunas num√©ricas em vetores bin√°rios (dummies).
previsores2 = ColumnTransformer(transformers=[('OneHot', OneHotEncoder(), [1, 2, 6, 8, 10])], 
                                remainder='passthrough').fit_transform(previsores2)

previsores3_df = pd.DataFrame(previsores3)

print(previsores3_df.head())

# print(dados.head())

#   === Escalonamento com as vari√°veis Dummy   ===

previsores3_escalonados = StandardScaler().fit_transform(previsores3)
 
previsores3_df = pd.DataFrame(previsores3_escalonados)

print(previsores3_df.describe())
