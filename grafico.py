import matplotlib.pyplot as plt
import re, os



def generate_grafics(name, train_param, val_param, x_label, y_label, figsize=(18, 6)):
    pass


if __name__ == "__main__":


    file_dir = os.path.dirname(os.path.abspath(__file__))

    history_path = os.path.join(file_dir, 'screening_fit_history')

history_run1 = {
    'epochs': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
    'loss': [0.9843, 0.5069, 0.4905, 0.5262, 0.3170, 0.1097, 0.2620, 0.3350, 0.2690, 0.3685, 0.2684, 0.1733, 0.2468, 0.2262, 0.2609, 0.2022, 0.2545, 0.2327, 0.2343, 0.2352, 0.2393, 0.2812, 0.2423, 0.2046, 0.2216, 0.2008, 0.2150, 0.2531, 0.2255, 0.2617, 0.2232, 0.3107, 0.2139, 0.1157, 0.2100, 0.2079, 0.2173, 0.1132, 0.2075, 0.1784, 0.1995, 0.2396, 0.2035, 0.1150, 0.1977, 0.2041, 0.2087, 0.1575, 0.2139, 0.2943, 0.2062, 0.2767, 0.2284, 0.2045, 0.1943, 0.1529, 0.1872, 0.1154, 0.1910, 0.1649, 0.1991, 0.1902, 0.2026, 0.1939, 0.1875, 0.1869, 0.1842, 0.1254, 0.1883],
    'val_loss': [31.8631, 31.0028, 0.7630, 0.7434, 0.3061, 0.3130, 0.3264, 0.3261, 0.3215, 0.3134, 0.2798, 0.2915, 0.2746, 0.2776, 0.4579, 0.4788, 0.2680, 0.2675, 0.2788, 0.2861, 0.2942, 0.3046, 0.3218, 0.3180, 0.2847, 0.2827, 0.2572, 0.2555, 0.3053, 0.3040, 0.4515, 0.4394, 0.2830, 0.2832, 0.2773, 0.2764, 0.2984, 0.2906, 0.2677, 0.2737, 0.2840, 0.2827, 0.2722, 0.2712, 0.3223, 0.3179, 0.2783, 0.2788, 0.2874, 0.2884, 0.3742, 0.3736, 0.3172, 0.3096, 0.2853, 0.2848, 0.2801, 0.2838, 0.2629, 0.2689, 0.2768, 0.2830, 0.2873, 0.2843, 0.2979, 0.2994, 0.2888, 0.2897, 0.3248],
    'auc': [0.7369, 0.6380, 0.8141, 0.7682, 0.8590, 0.9971, 0.8917, 0.8118, 0.8899, 0.8359, 0.8915, 0.9580, 0.9060, 0.9089, 0.8951, 0.9336, 0.8995, 0.9336, 0.9173, 0.9245, 0.9126, 0.9046, 0.9131, 0.9209, 0.9274, 0.9460, 0.9309, 0.8704, 0.9235, 0.8981, 0.9224, 0.8747, 0.9321, 0.9967, 0.9343, 0.9303, 0.9286, 0.9993, 0.9359, 0.9609, 0.9408, 0.9186, 0.9369, 0.9766, 0.9420, 0.9492, 0.9339, 0.9730, 0.9312, 0.8923, 0.9370, 0.8604, 0.9202, 0.9303, 0.9449, 0.9710, 0.9508, 0.9961, 0.9449, 0.9606, 0.9416, 0.9326, 0.9362, 0.9590, 0.9462, 0.9515, 0.9517, 0.9798, 0.9470],
    'val_auc': [0.7932, 0.7883, 0.7155, 0.7099, 0.8758, 0.8725, 0.8530, 0.8542, 0.8827, 0.8882, 0.8829, 0.8754, 0.8919, 0.8875, 0.8274, 0.8226, 0.8969, 0.8943, 0.8842, 0.8851, 0.8839, 0.8806, 0.8633, 0.8680, 0.8745, 0.8793, 0.8961, 0.8980, 0.8758, 0.8746, 0.8110, 0.8119, 0.8850, 0.8836, 0.8828, 0.8857, 0.8765, 0.8765, 0.8942, 0.8913, 0.8901, 0.8889, 0.8935, 0.8927, 0.8579, 0.8591, 0.8937, 0.8907, 0.8844, 0.8815, 0.8604, 0.8651, 0.8471, 0.8545, 0.8835, 0.8829, 0.8845, 0.8863, 0.8990, 0.8928, 0.8852, 0.8824, 0.8742, 0.8755, 0.8921, 0.8912, 0.8733, 0.8765, 0.8702]
}

# Dados extraídos manualmente da segunda rodada de treinamento
history_run2 = {
    'epochs': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64],
    'loss': [1.9345, 0.5762, 0.6395, 0.2416, 0.3057, 0.2597, 0.2792, 0.1779, 0.2550, 0.3399, 0.2495, 0.2417, 0.2491, 0.2435, 0.2330, 0.2687, 0.2519, 0.2596, 0.2480, 0.2212, 0.2303, 0.2167, 0.2251, 0.2181, 0.2258, 0.1204, 0.2229, 0.1917, 0.2164, 0.1602, 0.2281, 0.1510, 0.2138, 0.1596, 0.2134, 0.2378, 0.2087, 0.1996, 0.2062, 0.3003, 0.2110, 0.2740, 0.2062, 0.1194, 0.1972, 0.1015, 0.1925, 0.1055, 0.2025, 0.2030, 0.1976, 0.1612, 0.1907, 0.1617, 0.1912, 0.1698, 0.1994, 0.2521, 0.1852, 0.2371, 0.1789, 0.1278, 0.1919, 0.1939],
    'val_loss': [11.5927, 11.6265, 1.6765, 1.6202, 0.5579, 0.5340, 0.3181, 0.3085, 0.2771, 0.2850, 0.2469, 0.2502, 0.2593, 0.2648, 0.3057, 0.3008, 0.2833, 0.2792, 0.2895, 0.2894, 0.3018, 0.3006, 0.2788, 0.2863, 0.2798, 0.2822, 0.2550, 0.2558, 0.3067, 0.3173, 0.2649, 0.2635, 0.2627, 0.2552, 0.2826, 0.2841, 0.2614, 0.2572, 0.2570, 0.2533, 0.2540, 0.2624, 0.3862, 0.3834, 0.2419, 0.2459, 0.2447, 0.2404, 0.2934, 0.2917, 0.2577, 0.2588, 0.2513, 0.2519, 0.2916, 0.2881, 0.2574, 0.2596, 0.2375, 0.2359, 0.2596, 0.2554, 0.2783, 0.2843],
    'auc': [0.7105, 0.7500, 0.7780, 0.9303, 0.8640, 0.9014, 0.8723, 0.9665, 0.8942, 0.8050, 0.9002, 0.9076, 0.9010, 0.9212, 0.9143, 0.8874, 0.9007, 0.9053, 0.9036, 0.9225, 0.9204, 0.9261, 0.9205, 0.9141, 0.9223, 0.9922, 0.9239, 0.9460, 0.9264, 0.9691, 0.9247, 0.9834, 0.9304, 0.9844, 0.9293, 0.9342, 0.9355, 0.9447, 0.9343, 0.8779, 0.9310, 0.8669, 0.9341, 0.9870, 0.9425, 0.9909, 0.9430, 0.9902, 0.9356, 0.9482, 0.9374, 0.9639, 0.9464, 0.9717, 0.9454, 0.9704, 0.9402, 0.9131, 0.9478, 0.9043, 0.9527, 0.9886, 0.9454, 0.9590],
    'val_auc': [0.4694, 0.4707, 0.3920, 0.3923, 0.5061, 0.5326, 0.8559, 0.8626, 0.8732, 0.8633, 0.8999, 0.8958, 0.8905, 0.8852, 0.8579, 0.8591, 0.8718, 0.8766, 0.8645, 0.8652, 0.8477, 0.8443, 0.8713, 0.8712, 0.8809, 0.8787, 0.8969, 0.8906, 0.8690, 0.8580, 0.8871, 0.8883, 0.8896, 0.8972, 0.8794, 0.8796, 0.8909, 0.8942, 0.8952, 0.8974, 0.9024, 0.8940, 0.8033, 0.8061, 0.9043, 0.9015, 0.9027, 0.9075, 0.8772, 0.8757, 0.8940, 0.8935, 0.9048, 0.9002, 0.8809, 0.8800, 0.8932, 0.8916, 0.9097, 0.9111, 0.8941, 0.8973, 0.8912, 0.8912, 0.8755, 0.8921, 0.8912, 0.8733, 0.8765, 0.8702]
}

def plot_metrics(history, run_number):
    """Gera os 3 gráficos para um dado histórico."""
    epochs = history['epochs']
    auc = history['auc']
    val_auc = history['val_auc']
    loss = history['loss']
    val_loss = history['val_loss']
    binary_crossentropy = history['loss']
    val_binary_crossentropy = history['val_loss']

    # Subplot para os 3 gráficos
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    fig.suptitle(f'Histórico de Treinamento - Rodada {run_number}', fontsize=16)
    
    # Gráfico de AUC (o equivalente a acurácia no seu log)
    axes[0].plot(epochs, auc, label='Treinamento AUC', color='blue')
    axes[0].plot(epochs, val_auc, label='Validação AUC', color='red', linestyle='--')
    axes[0].set_title('Precisão - AUC vs. Épocas')
    axes[0].set_xlabel('Épocas')
    axes[0].set_ylabel('AUC')
    axes[0].legend()
    axes[0].grid(True)
    
    # Gráfico de Binary Cross-Entropy
    axes[1].plot(epochs, binary_crossentropy, label='Treinamento BCE', color='blue')
    axes[1].plot(epochs, val_binary_crossentropy, label='Validação BCE', color='red', linestyle='--')
    axes[1].set_title('Binary Cross-Entropy vs. Épocas')
    axes[1].set_xlabel('Épocas')
    axes[1].set_ylabel('Binary Cross-Entropy')
    axes[1].legend()
    axes[1].grid(True)

    # Gráfico de Loss
    axes[2].plot(epochs, loss, label='Treinamento Loss', color='blue')
    axes[2].plot(epochs, val_loss, label='Validação Loss', color='red', linestyle='--')
    axes[2].set_title('Loss vs. Épocas')
    axes[2].set_xlabel('Épocas')
    axes[2].set_ylabel('Loss')
    axes[2].legend()
    axes[2].grid(True)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

# Gerar gráficos para a primeira rodada
plot_metrics(history_run1, 1)

# # Gerar gráficos para a segunda rodada
# plot_metrics(history_run2, 2)